NOTE A PROGRAM TO DISPLAY THE CHARACTERS MAP ON THE DISPLAY
JMP INIT

MARK STR_NONE
DSTR NONE.
MARK STR_UP
DSTR UP.
MARK STR_DOWN
DSTR DOWN.
MARK STR_LEFT
DSTR LEFT.
MARK STR_RIGHT
DSTR RIGHT.
MARK STR_MULTI
DSTR MULTI.

MARK GAMEPAD_NAMES
DATA STR_NONE STR_UP STR_DOWN STR_LEFT STR_RIGHT STR_MULTI
MARK GAMEPAD_NAMES_END

MARK INIT

NOTE SETUP THE STACK
SET SP STACK

MARK LOOP
NOTE GET THE BUTTON ID
ADD SP 2
CALL GET_BUTTON_ID
POP B
NOTE B NOW CONTAINS THE BUTTON ID
MUL B 2
ADD B GAMEPAD_NAMES
NOTE B NOW POINTS TO THE STRING POINTER INSIDE THE GAMEPAD_NAMES_ARRAY
GET B B
NOTE B NOW POINTS TO THE STRING WE WANT TO PRINT

NOTE CLEAR THE PREVIOUS STRING
PUSH VRAM
CALL CLEAR_STRING
SUB SP 2

NOTE PRINT THE STRING
PUSH B
PUSH VRAM
CALL PRINT_STRING
SUB SP 4

NOTE PAINT THE STRING
PUSH 0x0A
PUSH VRAM
CALL PAINT_STRING
SUB SP 4

NOTE COPY THE GAMEPAD BYTES TO THE SPEAKER BYTES
GET GAMEPADS SPEAKER

CALL VSYNC

JMP LOOP

NOTE WAIT FOR THE VERTICAL SYNC
MARK VSYNC
PUSH T
NOTE CLEAR THE VSYNC BIT
AND VATTRIBUTES 0xFF7F
NOTE FOR THE UPCOMING VSYNC
MARK VSYNC_WAIT
GET VATTRIBUTES T
AND T 0x80
JE VSYNC_WAIT
POP T
RET

NOTE PUSH THE SOURCE ADDRESS INTO THE STACK
NOTE THEN PUSH THE DESTINATION ADDRESS INTO THE STACK
NOTE AND CALL THE FUNCTION AFTER THAN
NOTE FINALLY POP THE SOURCE AND DESTINATION ADDRESSES FROM THE STACK
NOTE
NOTE THIS DOESN'T COPY THE NULL CHARACTER!
NOTE THE DESTINATION ADDRESS IN THE STACK WILL CONTAIN THE ADDRESS
NOTE WHERE THE NULL CHARACTER CAN BE COPIED TO
MARK PRINT_STRING
PUSH A
PUSH B
PUSH T
GET [SP-10] B
GET [SP-12] A

MARK PRINT_STRING_LOOP
GET A T
JE PRINT_STRING_NULL
SET [B] T
ADD A 2
ADD B 2
JMP PRINT_STRING_LOOP

MARK PRINT_STRING_NULL
SET [SP-10] B
POP T
POP B
POP A
RET

NOTE PUSH THE ATTRIBUTES
NOTE PUSH THE TARGET ADDRESS INTO THE STACK
NOTE THEN CALL THE FUNCTION
NOTE AND POP THE OPERATION END ADDRESS FROM THE STACK + THE ATTRIBUTES
NOTE
NOTE THE OPERATION WILL SET THE ATTRIBUTES OF THE TARGET STRING
MARK PAINT_STRING
PUSH A
PUSH B
PUSH T
GET [SP-10] A
GET [SP-12] B
SHL B 8

MARK PAINT_STRING_LOOP
GET A T
JE PAINT_STRING_NULL
AND [A] 0x00FF
ADD [A] B
ADD A 2
JMP PAINT_STRING_LOOP

MARK PAINT_STRING_NULL
SET [SP-10] A
POP T
POP B
POP A
RET

NOTE PUSH THE TARGET ADDRESS INTO THE STACK
NOTE THEN CALL THE FUNCTION
NOTE AND POP THE OPERATION END ADDRESS FROM THE STACK
NOTE
NOTE THE OPERATION WILL REPLACE THE STRING WITH NULL BYTES
MARK CLEAR_STRING
PUSH A
PUSH T
GET [SP-8] A

MARK CLEAR_STRING_LOOP
GET A T
JE CLEAR_STRING_NULL
SET [A] 0
ADD A 2
JMP CLEAR_STRING_LOOP

MARK CLEAR_STRING_NULL
SET [SP-8] A
POP T
POP A
RET

NOTE UP DOWN LEFT RIGHT
NOTE 1  2    3    4

NOTE PUSH ANY VALUE INTO THE STACK BEFORE CALLING GET_BUTTON_ID
NOTE AND AFTER CALLING, POP THE BUTTON ID FROM THE STACK
MARK GET_BUTTON_ID
PUSH A
NOTE READ THE GAMEPADS INPUT INTO REGISTER D
GET GAMEPADS A
NOTE MASK THE PLAYER 1 GAMEPAD
AND A 0x00FF
NOTE MAKE A THE D-PAD NIBBLE
SHR A 4
NOTE GET THE RETURN VALUE FROM THE ARRAY
MUL A 2
ADD A GET_BUTTON_ID_ARRAY
NOTE A NOW HAS THE RETURN VALUE
GET A A
NOTE SP-2 IS THE PUSHED A, SP-4 IS THE RETURN ADDRESS
NOTE THEN SP-6 IS THE RETURN VALUE ADDRESS
SET [SP-6] A
NOTE RETURN TO THE CALLER
POP A
RET

MARK GET_BUTTON_ID_ARRAY
DATA 0 1 2 5 3 5 5 5 4 5 5 5 5 5 5 5

MARK STACK
